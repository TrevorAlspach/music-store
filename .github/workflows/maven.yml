# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: | 
        mvn package -B --file pom.xml -DSPRING_DATASOURCE_USERNAME=${{secrets.SPRING_DATASOURCE_USERNAME}} -DOKTA_OAUTH2_ISSUER=${{secrets.OKTA_OAUTH2_ISSUER}} \
        -DOKTA_OAUTH2_CLIENTID=${{secrets.OKTA_OAUTH2_CLIENTID}} -DOKTA_OAUTH2_CLIENTSECRET=${{secrets.OKTA_OAUTH2_CLIENTSECRET}} \
        -DOKTA_OAUTH2_AUDIENCE=${{secrets.OKTA_OAUTH2_AUDIENCE}} -DOKTA_MANAGEMENTAPI_TOKENURL=${{secrets.OKTA_MANAGEMENTAPI_TOKENURL}} \
        -DOKTA_MANAGEMENTAPI_AUDIENCE=${{secrets.OKTA_MANAGEMENTAPI_AUDIENCE}} -DOKTA_MANAGEMENTAPI_DOMAIN=${{secrets.OKTA_MANAGEMENTAPI_DOMAIN}} \
        -DOKTA_MANAGEMENTAPI_CLIENTID=${{secrets.OKTA_MANAGEMENTAPI_CLIENTID}} -DOKTA_MANAGEMENTAPI_CLIENTSECRET=${{secrets.OKTA_MANAGEMENTAPI_CLIENTSECRET}} \
        -DOKTA_MANAGEMENTAPI_GRANTTYPE=${{secrets.OKTA_MANAGEMENTAPI_GRANTTYPE}}

    - name: Log into Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Tag Docker Image
      run: |
        docker image ls
        IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/music-store"  # Change this to your Docker Hub repository name
        IMAGE_TAG="latest"  # You can use a different tag or parameterize it

        # Tag the image
        docker tag ${{ secrets.DOCKER_USERNAME }}/music-store $IMAGE_NAME:$IMAGE_TAG
    
